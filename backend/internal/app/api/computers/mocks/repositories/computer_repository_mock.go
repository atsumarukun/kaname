// Code generated by MockGen. DO NOT EDIT.
// Source: internal/app/api/computers/domain/repositories/computer.go

// Package mock_repositories is a generated GoMock package.
package mock_repositories

import (
	entities "backend/internal/app/api/computers/domains/entities"
	database "backend/internal/app/api/pkg/database"
	reflect "reflect"

	gomock "github.com/golang/mock/gomock"
	gorm "gorm.io/gorm"
)

// MockComputerRepository is a mock of ComputerRepository interface.
type MockComputerRepository struct {
	ctrl     *gomock.Controller
	recorder *MockComputerRepositoryMockRecorder
}

// MockComputerRepositoryMockRecorder is the mock recorder for MockComputerRepository.
type MockComputerRepositoryMockRecorder struct {
	mock *MockComputerRepository
}

// NewMockComputerRepository creates a new mock instance.
func NewMockComputerRepository(ctrl *gomock.Controller) *MockComputerRepository {
	mock := &MockComputerRepository{ctrl: ctrl}
	mock.recorder = &MockComputerRepositoryMockRecorder{mock}
	return mock
}

// EXPECT returns an object that allows the caller to indicate expected use.
func (m *MockComputerRepository) EXPECT() *MockComputerRepositoryMockRecorder {
	return m.recorder
}

// Create mocks base method.
func (m *MockComputerRepository) Create(arg0 *gorm.DB, arg1 *entities.Computer) error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "Create", arg0, arg1)
	ret0, _ := ret[0].(error)
	return ret0
}

// Create indicates an expected call of Create.
func (mr *MockComputerRepositoryMockRecorder) Create(arg0, arg1 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "Create", reflect.TypeOf((*MockComputerRepository)(nil).Create), arg0, arg1)
}

// Delete mocks base method.
func (m *MockComputerRepository) Delete(arg0 *gorm.DB, arg1 *entities.Computer) error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "Delete", arg0, arg1)
	ret0, _ := ret[0].(error)
	return ret0
}

// Delete indicates an expected call of Delete.
func (mr *MockComputerRepositoryMockRecorder) Delete(arg0, arg1 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "Delete", reflect.TypeOf((*MockComputerRepository)(nil).Delete), arg0, arg1)
}

// Find mocks base method.
func (m *MockComputerRepository) Find(arg0 *gorm.DB, arg1 *[]entities.Computer, arg2 *database.Options) error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "Find", arg0, arg1, arg2)
	ret0, _ := ret[0].(error)
	return ret0
}

// Find indicates an expected call of Find.
func (mr *MockComputerRepositoryMockRecorder) Find(arg0, arg1, arg2 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "Find", reflect.TypeOf((*MockComputerRepository)(nil).Find), arg0, arg1, arg2)
}

// FindOneById mocks base method.
func (m *MockComputerRepository) FindOneById(arg0 *gorm.DB, arg1 *entities.Computer, arg2 uint) error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "FindOneById", arg0, arg1, arg2)
	ret0, _ := ret[0].(error)
	return ret0
}

// FindOneById indicates an expected call of FindOneById.
func (mr *MockComputerRepositoryMockRecorder) FindOneById(arg0, arg1, arg2 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "FindOneById", reflect.TypeOf((*MockComputerRepository)(nil).FindOneById), arg0, arg1, arg2)
}

// Update mocks base method.
func (m *MockComputerRepository) Update(arg0 *gorm.DB, arg1 *entities.Computer) error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "Update", arg0, arg1)
	ret0, _ := ret[0].(error)
	return ret0
}

// Update indicates an expected call of Update.
func (mr *MockComputerRepositoryMockRecorder) Update(arg0, arg1 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "Update", reflect.TypeOf((*MockComputerRepository)(nil).Update), arg0, arg1)
}
